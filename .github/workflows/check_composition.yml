name: rtype-server-test

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  check_program_compilation:
    name: Build & check (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show runner info
        run: |
          echo "Runner OS: $RUNNER_OS"
          uname -a || true
          bash --version | head -n 1 || true

      # ---------- LINUX ----------
      - name: Ensure cmake & ninja (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build
          echo "::notice::$(cmake --version | head -n1)"
          echo "::notice::$(ninja --version)"

      - name: Check & run build.sh (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          test -f build.sh || { echo "::error ::/!\\ WARNING NO build.sh FOUND /!\\"; exit 84; }
          chmod +x build.sh
          ./build.sh

      - name: Check executable (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        env:
          EXECUTABLE_PATH: ${{ vars.EXECUTABLE_PATH }}
        run: |
          executable="${EXECUTABLE_PATH}"
          if [ -z "$executable" ]; then
            echo "::error ::EXECUTABLE_PATH is not set."
            exit 84
          fi
          if [ -x "$executable" ] || [ -f "$executable" ]; then
            echo "::notice file=$executable::Executable found."
          else
            echo "::error file=$executable::Executable missing."
            ls -la
            exit 84
          fi

      # ---------- MACOS ----------
      - name: Ensure cmake & ninja (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          if ! command -v brew >/dev/null 2>&1; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            eval "$(/opt/homebrew/bin/brew shellenv)" || true
            eval "$(/usr/local/bin/brew shellenv)" || true
          fi
          brew update
          brew install cmake ninja
          echo "::notice::$(cmake --version | head -n1)"
          echo "::notice::$(ninja --version)"

      - name: Check & run build.sh (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          test -f build.sh || { echo "::error ::/!\\ WARNING NO build.sh FOUND /!\\"; exit 84; }
          chmod +x build.sh
          ./build.sh

      - name: Check executable (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          EXECUTABLE_PATH: ${{ vars.EXECUTABLE_PATH }}
        run: |
          executable="${EXECUTABLE_PATH}"
          if [ -z "$executable" ]; then
            echo "::error ::EXECUTABLE_PATH is not set."
            exit 84
          fi
          if [ -x "$executable" ] || [ -f "$executable" ]; then
            echo "::notice file=$executable::Executable found."
          else
            echo "::error file=$executable::Executable missing."
            ls -la
            exit 84
          fi

      # ---------- WINDOWS ----------
      - name: Ensure cmake & ninja (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          if (-not (Get-Command cmake -ErrorAction SilentlyContinue)) {
            choco install cmake --yes --no-progress --installargs "ADD_CMAKE_TO_PATH=System"
          }
          if (-not (Get-Command ninja -ErrorAction SilentlyContinue)) {
            # Package id is 'ninja'
            choco install ninja --yes --no-progress
          }
          cmake --version | Select-Object -First 1
          ninja  --version

      - name: Run build.ps1 if present, else build.sh (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          if (Test-Path ./build.ps1) {
            Write-Host "::notice file=build.ps1::Running build.ps1…"
            ./build.ps1
            if ($LASTEXITCODE -ne 0) { exit 84 }
          } elseif (Test-Path ./build.sh) {
            Write-Host "::notice file=build.sh::Running build.sh via Git Bash…"
            bash ./build.sh
            if ($LASTEXITCODE -ne 0) { exit 84 }
          } else {
            Write-Host "::error ::/!\ NO build.ps1 OR build.sh FOUND /!\"
            exit 84
          }

      - name: Check executable (.exe) on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        env:
          EXECUTABLE_PATH: ${{ vars.EXECUTABLE_PATH }}
        run: |
          $exe = $env:EXECUTABLE_PATH
          if ([string]::IsNullOrWhiteSpace($exe)) {
            Write-Host "::error ::EXECUTABLE_PATH is not set."
            exit 84
          }
          $exeWithExt = ($exe.ToLower().EndsWith(".exe")) ? $exe : "$exe.exe"
          if (Test-Path -Path $exeWithExt -PathType Leaf) {
            Write-Host "::notice file=$exeWithExt::Executable found (.exe)."
            exit 0
          }
          if (Test-Path -Path $exe -PathType Leaf) {
            Write-Host "::notice file=$exe::Executable found (no extension)."
            exit 0
          }
          Write-Host "::error file=$exeWithExt::Executable not found (checked '$exeWithExt' and '$exe')."
          Get-ChildItem -Recurse -File | Select-Object -First 200 | Format-Table FullName,Length,LastWriteTime
          exit 84

